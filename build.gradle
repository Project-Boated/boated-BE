plugins {
    // Java
    id 'java'

    // Spring
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    // Ascii Doctor
    id "org.asciidoctor.jvm.convert" version "3.3.2"

    // Jacoco
    id 'jacoco'
}

group = 'com.projectboated'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

ext {
    // For Spring Rest Docs
    snippetsDir = file('build/generated-snippets')
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions
}


dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Test
    testImplementation 'org.mockito:mockito-inline'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation 'com.h2database:h2'
    implementation 'org.flywaydb:flyway-core'

    // Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Spring Rest Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // Utils
    implementation 'com.google.guava:guava:31.0.1-jre'

    // Querydsl
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-jpa'
    annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa")
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")
}

test {
    // For Spring Rest Docs
    outputs.dir snippetsDir

    useJUnitPlatform()
}

// Jacoco 시작

jacoco{
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    // Domain common
                    // TODO: 테스트 필요
                    "com/projectboated/backend/domain/common/**/*",
                    // incomplete service logic
                    // TODO: 테스트 필요
                    "com/projectboated/backend/domain/invitation/**/*",
                    "com/projectboated/backend/domain/task/**/*",
                    "com/projectboated/backend/domain/uploadfile/**/*",
                    // Infra, 자동화 테스트 불가
                    "com/projectboated/backend/infra/**/*",
                    // Spring Security
                    // TODO: 테스트 작성해야함 (현재 단위 테스트를 어떻게 해야하나 고민중)
                    "com/projectboated/backend/security/**/*",
                    // Web
                    // TODO: 인수 테스트 작성 요망
                    "com/projectboated/backend/web/**/*",
                    // QFile, 테스트 불필요.
                    "com/projectboated/backend/domain/**/Q*.*",
                    // Test file, 테스트 불필요
                    "com/projectboated/backend/TestController.class"
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }
    }
}

// Jacoco 끝

// Spring Rest Docs 시작
asciidoctor {
    dependsOn jacocoTestReport
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

//task copyDocument(type: Copy) {
//    dependsOn asciidoctor
//    from file("${asciidoctor.outputDir}")
//    into file("src/main/resources/static/docs")
//}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into 'BOOT-INF/classes/static/docs'
    }
}
// Spring Rest Docs 끝

// Compiler 추가 옵션 시작
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            // Graal Compiler setting
            //<< "-XX:+UnlockExperimentalVMOptions" << "-XX:+EnableJVMCI" << "-XX:+EnableJVMCI"
        }
    }
}
// Compiler 추가 옵션 끝
